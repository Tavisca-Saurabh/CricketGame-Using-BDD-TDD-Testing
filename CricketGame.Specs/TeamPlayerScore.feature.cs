// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CricketGame.Specs
{
    using TechTalk.SpecFlow;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TeamPlayerScoreFeature : Xunit.IClassFixture<TeamPlayerScoreFeature.FixtureData>, System.IDisposable
    {

        private static TechTalk.SpecFlow.ITestRunner testRunner;

        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;

#line 1 "TeamPlayerScore.feature"
#line hidden

        public TeamPlayerScoreFeature(TeamPlayerScoreFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }

        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TeamPlayerScore", "\tIn order to enjoy a game of cricket between two players\r\n\tAs an audience\r\n\tI wan" +
                    "t to see the result of the match", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        public virtual void TestInitialize()
        {
        }

        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }

        [Xunit.FactAttribute(DisplayName = "Players Score is zero when game starts")]
        [Xunit.TraitAttribute("FeatureTitle", "TeamPlayerScore")]
        [Xunit.TraitAttribute("Description", "Players Score is zero when game starts")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void PlayersScoreIsZeroWhenGameStarts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Players Score is zero when game starts", new string[] {
                        "mytag"});
#line 7
            this.ScenarioSetup(scenarioInfo);
#line 8
            testRunner.When("Players has started a game of cricket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
            testRunner.Then("the players score should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Xunit.FactAttribute(DisplayName = "Player 1 scores runs")]
        [Xunit.TraitAttribute("FeatureTitle", "TeamPlayerScore")]
        [Xunit.TraitAttribute("Description", "Player 1 scores runs")]
        public virtual void Player1ScoresRuns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player 1 scores runs", ((string[])(null)));
#line 11
            this.ScenarioSetup(scenarioInfo);
#line 12
            testRunner.Given("Player 1 has started a game of cricket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
            testRunner.When("Player 1 scores 4 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
            testRunner.Then("Player 1 has scored 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Xunit.FactAttribute(DisplayName = "Player 2 scores runs")]
        [Xunit.TraitAttribute("FeatureTitle", "TeamPlayerScore")]
        [Xunit.TraitAttribute("Description", "Player 2 scores runs")]
        public virtual void Player2ScoresRuns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player 2 scores runs", ((string[])(null)));
#line 16
            this.ScenarioSetup(scenarioInfo);
#line 17
            testRunner.Given("Player 2 has started a game of cricket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
            testRunner.When("Player 2 scores 6 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
            testRunner.Then("Player 2 has scored 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Xunit.FactAttribute(DisplayName = "Player one gets out after scoring some runs")]
        [Xunit.TraitAttribute("FeatureTitle", "TeamPlayerScore")]
        [Xunit.TraitAttribute("Description", "Player one gets out after scoring some runs")]
        public virtual void PlayerOneGetsOutAfterScoringSomeRuns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player one gets out after scoring some runs", ((string[])(null)));
#line 21
            this.ScenarioSetup(scenarioInfo);
#line 22
            testRunner.Given("Player 1 has started a game of cricket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
            testRunner.Given("Player 1 scores 3 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
            testRunner.Given("Player 1 gets out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
            testRunner.When("Player 1 scores 5 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
            testRunner.Then("Player 1 has scored 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Xunit.FactAttribute(DisplayName = "Player 2 gets out after scoring some runs")]
        [Xunit.TraitAttribute("FeatureTitle", "TeamPlayerScore")]
        [Xunit.TraitAttribute("Description", "Player 2 gets out after scoring some runs")]
        public virtual void Player2GetsOutAfterScoringSomeRuns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player 2 gets out after scoring some runs", ((string[])(null)));
#line 28
            this.ScenarioSetup(scenarioInfo);
#line 29
            testRunner.Given("Player 2 has started a game of cricket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
            testRunner.Given("Player 2 scores 3 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
            testRunner.Given("Player 2 scores 5 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
            testRunner.Given("Player 2 gets out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
            testRunner.When("Player 2 scores 1 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
            testRunner.Then("Player 2 has scored 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Xunit.FactAttribute(DisplayName = "Both the players get out and the result is decared")]
        [Xunit.TraitAttribute("FeatureTitle", "TeamPlayerScore")]
        [Xunit.TraitAttribute("Description", "Both the players get out and the result is decared")]
        public virtual void BothThePlayersGetOutAndTheResultIsDecared()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Both the players get out and the result is decared", ((string[])(null)));
#line 36
            this.ScenarioSetup(scenarioInfo);
#line 37
            testRunner.Given("Player 2 has started a game of cricket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
            testRunner.Given("Player 2 scores 1 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
            testRunner.Given("Player 2 scores 2 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
            testRunner.Given("Player 2 gets out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
            testRunner.Given("Player 1 has started a game of cricket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
            testRunner.Given("Player 1 scores 2 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
            testRunner.Given("Player 1 gets out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
            testRunner.When("Both get out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
            testRunner.Then("Declare the result Player 2 wins with more runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Xunit.FactAttribute(DisplayName = "Both score the same runs and result is declared")]
        [Xunit.TraitAttribute("FeatureTitle", "TeamPlayerScore")]
        [Xunit.TraitAttribute("Description", "Both score the same runs and result is declared")]
        public virtual void BothScoreTheSameRunsAndResultIsDeclared()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Both score the same runs and result is declared", ((string[])(null)));
#line 47
            this.ScenarioSetup(scenarioInfo);
#line 48
            testRunner.Given("Player 2 has started a game of cricket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
            testRunner.Given("Player 2 scores 3 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
            testRunner.Given("Player 2 gets out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
            testRunner.Given("Player 1 has started a game of cricket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
            testRunner.Given("Player 1 scores 3 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
            testRunner.Given("Player 1 gets out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
            testRunner.When("Both get out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
            testRunner.Then("Declare the result as tied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {

            public FixtureData()
            {
                TeamPlayerScoreFeature.FeatureSetup();
            }

            void System.IDisposable.Dispose()
            {
                TeamPlayerScoreFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
